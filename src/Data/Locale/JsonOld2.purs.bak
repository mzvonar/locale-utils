module Data.Locale.JsonOld2 where

import Prelude

import Control.Alt ((<|>))
import Data.Argonaut (Json, JsonDecodeError(..), caseJson, caseJsonObject, caseJsonString, decodeJson, encodeJson, fromObject, fromString, isObject, isString, jsonEmptyArray, jsonEmptyObject, jsonParser, parseJson, stringify, stringifyWithIndent, toObject, toString)
import Data.Argonaut.Decode.Class (class DecodeJson)
import Data.Argonaut.Decode.Error (JsonDecodeError(..))
import Data.Argonaut.Decode.Generic (genericDecodeJson)
import Data.Argonaut.Encode.Class (class EncodeJson)
import Data.Argonaut.Encode.Combinators ((:=), (~>))
import Data.Argonaut.Encode.Generic (genericEncodeJson)
import Data.Array ((:))
import Data.Bifunctor (lmap)
import Data.Either (Either(..), either, isRight)
import Data.Foldable (foldr)
import Data.FoldableWithIndex (foldrWithIndex)
import Data.Generic.Rep (class Generic)
import Data.Map (Map)
import Data.Map as Map
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Show.Generic (genericShow)
import Data.Traversable (sequence)
import Data.Tuple (Tuple(..))
import Foreign.Object (Object)
import Foreign.Object as FO

showJson :: forall a. Show a => Either String a -> String
showJson (Left e) = e
showJson (Right v) = show v

type TranslationKey = String

data NestedTranslationValue
  = NestedTranslationValue TranslationKey String
  | TranslationParent TranslationKey (Array NestedTranslationValue)

data Translation = Translation (Array NestedTranslationValue)

derive instance genericNestedTranslationValue :: Generic NestedTranslationValue _

instance showNestedTranslationValue :: Show NestedTranslationValue where
  show a = genericShow a

derive instance genericTranslation :: Generic Translation _

instance showTranslation :: Show Translation where
  show a = genericShow a


-- instance decodeJsonTranslation :: DecodeJson Translation where
--   decodeJson a = genericDecodeJson a

toTranslation :: Json -> Either JsonDecodeError Translation
toTranslation = caseJsonObject (Left $ TypeMismatch "Translation root is not an object") parse
  where
    parse :: Object Json -> Either JsonDecodeError Translation
    parse o = do
      t <- toArray o
      pure $ Translation t
      -- pure $ case t of
      --   Right t -> Translation t
      --   Left e -> e

    toArray :: Object Json -> Either JsonDecodeError (Array NestedTranslationValue)
    toArray o = sequence $ foldrWithIndex (\k v acc -> (toNestedTranslationValue k v):acc) [] o

toNestedTranslationValue :: String -> Json -> Either JsonDecodeError NestedTranslationValue
toNestedTranslationValue k = caseJson (l "") (l "Boolean") (l "Number") (\v -> Right $ NestedTranslationValue k v) (l "Array") \o -> toParent k o
  where
    l :: forall a. String -> a -> Either JsonDecodeError _
    l t = \_ -> Left $ AtKey k $ TypeMismatch $ "Unkown translation type " <> show t

toParent :: String -> FO.Object Json -> Either JsonDecodeError NestedTranslationValue
toParent k o = do
  p <- sequence $ foldrWithIndex (\k v acc -> (toNestedTranslationValue k v):acc) [] o
  pure $ TranslationParent k p

instance decodeJsonTranslation :: DecodeJson Translation where
  decodeJson json = toTranslation json


fromTranslation :: Translation -> Json
fromTranslation (Translation t) = foldr ((~>) <<< fromNestedTranslationValue) jsonEmptyObject t

fromNestedTranslationValue :: NestedTranslationValue -> Tuple String Json
fromNestedTranslationValue (NestedTranslationValue k v) = k := v
fromNestedTranslationValue (TranslationParent k vs) = k := (foldr ((~>) <<< fromNestedTranslationValue) jsonEmptyObject vs)

instance encodeJsonTranslation :: EncodeJson Translation where
  encodeJson a = fromTranslation a



newtype NestedNamespace = NestedNamespace (Map TranslationKey Translation)

derive instance newtypeNestedNamespace :: Newtype NestedNamespace _
derive instance genericNestedNamespace :: Generic NestedNamespace _
derive newtype instance decodeJsonNestedNamespace :: DecodeJson NestedNamespace

instance showNestedNamespace :: Show NestedNamespace where
  show a = genericShow a

jstring :: String
jstring = """
{ 
  "key": "value",
  "key2": "value2",
  "parent": {
    "subKey": "subValue"
  }
}
  """

json' :: Either String Json
json' = jsonParser jstring

decodeAsTranslation :: String -> Either JsonDecodeError Translation
decodeAsTranslation str = do
    json <- parseJson str
    -- obj <- (decodeJson =<< parseJson str) :: Either JsonDecodeError NestedNamespace
    decodeJson json

decoded = decodeAsTranslation jstring

result :: String
result = either (\l -> "LEFT: " <> show l) (\r -> "RIGHT: " <> show r) $ decoded

-- trans = Parent (Map "")

strResult = either (\l -> "LEFT: " <> show l) (\r -> stringify (encodeJson r)) decoded